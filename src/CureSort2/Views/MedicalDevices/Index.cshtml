@model PaginatedList<CureSort2.Models.MedicalDevice>
@{
    ViewData["Title"] = "Index";
}
@inject IAuthorizationService _authorizationService

<h2>Index</h2>

<p>
    <a asp-action="Create">Create New</a> | @if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded) {<a asp-action="AdminCreate">Admin Create New</a>}
    </p>
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            <input id="SearchBox" placeholder="Search" autofocus type="text" name="barcode" style="margin-top:12px; width:200px" value="@ViewData["currentFilter"]" onkeypress="handle(event)" />
            <input type="submit" value="Search" class="btn btn-default" /> | @ViewBag.EmptyList
@if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
{
            <a asp-action="Index">Back to Full List</a>
}
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                Product Code
            </th>
            <th>
                Brand
            </th>
            @if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
            {
                <th>
                    CreatedBy
                </th>
            }
            <th>
                Description
</th>
            @if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
            {
            <th>
                IsApproved
            </th>
            }
            <th>
                Manufacturer
</th>
            @if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
            {
            <th>
                PhotoUrl
            </th>
            }
@if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
{
            <th>
                Submitted By
            </th>
}
@if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
{
            <th>
                Warehouse
            </th>
}
@if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
{
            <th>
                Date Submitted
            </th>
}
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Bin.BinNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Brand)
            </td>
            @if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
            {
            <td>
                @Html.DisplayFor(modelItem => item.CreatedBy)
            </td>
            }
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            @if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
            {
            <td>
                @Html.DisplayFor(modelItem => item.IsApproved)
            </td>
            }
            <td>
                @Html.DisplayFor(modelItem => item.Manufacturer)
            </td>
            @if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
            {
            <td>
                <a href="@item.PhotoUrl"><img src="@item.PhotoUrl" height="50" width="50" alt="@item.Description"/></a>
            </td>
            }
@if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
{
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
}
@if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
{
            <td>
                @Html.DisplayFor(modelItem => item.Warehouse)
            </td>
}
@if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
{
            <td>
                @Html.DisplayFor(modelItem => item.DateSubmitted)
            </td>
}
            <td>
@if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
{
                <a asp-action="Edit" asp-route-id="@item.ID">Edit</a>
}
                <a asp-controller="flags" asp-action="create" asp-route-id="@item.ID">Flag</a>
                <a asp-action="Details" asp-route-id="@item.ID">Details</a>
@if ((await _authorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
{
                <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
}
            </td>
        </tr>
}
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
<script>

    window.onload = function () {
        document.getElementById("SearchBox").value = '';
    };
</script>

